# content of: tox.ini , put in same dir as setup.py
# list env
# tox -l
# tox -a
[tox]
# envlist = test,build_venv,example
# Flag indicating to perform the packaging operation or not
# skipsdist=true

[testenv]
description = Default Setting
setenv =
    TOXINIDIR = {toxinidir}
    #  PIP_INDEX_URL = https://pypi.my-alternative-index.org

extras =
    testing
# pass all env to venv
passenv = *
# setenv = PYTHONHASHSEED = 100
basepython = python3.8
# command can use in venv
whitelist_externals =
    *
    #py.test
    #cmd

[testenv:pytest{-win,-linux,}{-report,}]
#tox -e pytest  -- -k 1423
#  -k 1423=> posargs
description = Test Pytest
platform =
        linux: linux
        win: win|msys
deps = pytest
       pytest-cov
       wheel

# run the tests
# ... or run any other command line tool you need to run here

commands =
            win: cmd /c echo "start win test"
            linux: sh -c echo "start linux test"
            !report: pytest {posargs}
            report: pytest --cov --junitxml=report.xml  --cov-report xml
            report: coverage report
            pip freeze
            win: cmd /c echo "end win test"
            linux: sh -c echo "end linux test"

[testenv:build_venv]
description = Build Virtual Env
skip_install = False
usedevelop = true
envdir = .venv
extras = tests
commands =
           cmd /c echo "build editable to venv"


[testenv:linting]
description = linting test
# cant skip install
skip_install = False
deps = pylint
commands =
           pylint --rcfile=tox.ini src

[testenv:flake8]
description = flake8 test
platform =
        linux: linux
        win: win|msys
skip_install = true
deps =
    flake8
commands =
    - flake8 src

[testenv:black]
# click problem cant use
description = black test
platform =
        linux: linux
        win: win|msys
skip_install = true
deps =
    black
commands =
    black --check --diff src

[testenv:packaging{-win,-linux}{-upload,}]
description =
    package to pega gitlab
usedevelop = false
skip_install = true
setenv =
platform =
        linux: linux
        win: win|msys
allowlist_externals =   *
    win: *
    linux: *  
deps = 
        twine
        setuptools
        setuptools_scm
        requests==2.27.0
commands =
    win: cmd /c echo 'windows build package'
    linux: sh -c echo 'linux build package'
    win: - cmd /c rmdir {toxinidir}/dist /s /q
    linux: - sh -c rm -rfv {toxinidir}/dist/
    python setup.py sdist bdist_wheel

    win: cmd /c echo 'windows upload'
    linux: sh -c echo 'linux upload'
    # win-release
    # wiki https://oran-git.pegatroncorp.com/5g-o-ran/system-verification/teamwiki/-/wikis/Gitlab-overview/Gitlab-upload-package-registry
    win-upload: twine upload  --repository-url https://oran-git.pegatroncorp.com/api/v4/projects/450/packages/pypi dist/* --verbose  -upip_ins_tmp_project -p2GnzS364bArW4B8LqQ2L
    linux-upload: sh -c 'export CURL_CA_BUNDLE="";TWINE_PASSWORD={env:CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python3 -m twine upload --repository-url {env:CI_API_V4_URL}/projects/{env:CI_PROJECT_ID}/packages/pypi dist/* --verbose  --client-cert ""'

[testenv:example{-win, -linux,}]
#tox -e example
#tox -e example-win
#tox -e example-linux

skip_install = true
platform =
        linux: linux
        win: win|msys
whitelist_externals =   *
    win: *
    linux: *
setenv =
    MYPAR = 35
commands = cmd /c echo "start"
           linux: cmd /c echo "linux test:{env:OS}"
           win: cmd /c echo "win test:{env:OS}"
           cmd /c echo "par test:{env:MYPAR}"
           # cmd /c SET
           #tox -e example  -- -k 1423
           # -k 1423 => posargs
           # if have any problem use -rvv
           # -r recreate
           #-vv --verbose
           cmd /c echo "{posargs}"
           python -c "import sys;print(sys.executable)"
           cmd /c echo "end"

# multi line
#commands = pytest --basetemp="{envtmpdir}"  \
#                  --confcutdir=..         \
#                  -n 3                    \
#                  {posargs}


[flake8]
ignore = E226,E302,E41,C901,W503
max-line-length = 150
exclude = tests/*
max-complexity = 10
per-file-ignores = __init__.py:F401,E402



[tool.black]
line-length = 150
fast = true
include = '\.pyi?$'
# exclude = '''


[pytest]
# markers
#  pytest --markers
markers = utest :unit test
          e2e   :e2e test
          only   :only test
# pytest -q --collect-only -m "utest and e2e"

# ref:https://gist.github.com/kwmiebach/3fd49612ef7a52b5ce3a
# - m marker ->run specify marker
#-s                    Show Output, do not caputure
#-x                    Stop after first failure
#-k "expression"       Only run tests that match expession (and fixtures)
#-rs                   Show extra summary info for SKIPPED
#-r chars              Show extra test summary info as specified by chars:
#                      (f)ailed, (E)error, (s)skipped, (x)failed, (X)passed
#                      (w)pytest-warnings (p)passed, (P)passed with output,
#                      (a)all except pP.
#-v                    Verbose
#-q, --quiet           Less verbose
#-l, --showlocals      Show local variables in tracebacks
# --cov
# run mark
# -m "fruits and not vegetable"
#addopts = -s -v -m aaa
# run specify file method..etc

#scope
#Package/Directory-level fixtures (setups)
#offical only use session scope .. no use for package
#addopts = -s -v --cov --junitxml=report.xml  --cov-report xml  "test_case/fixture_scope"

# all
addopts = -s -v --disable-pytest-warnings

#python_files = test*.py
#python_classes = Test*
#python_funtions = test*

[pylint.main]
disable=C,R,W

[pylint]

# pylint --disable=all --enable=F,E,W
#* (C) convention, for programming standard violation
#* (R) refactor, for bad code smell
#* (W) warning, for python specific problems
#* (E) error, for probable bugs in the code
#* (F) fatal, if an error occurred which prevented pylint from doing further processing.



# never-returning-functions=sys.exit
max-line-length=150
#max-module-lines=5000
#max-nested-blocks=10
#min-public-methods=1
#max-public-methods=20
#max-statements=200
#max-branches=50
#max-locals=75
#max-args=10
#notes=
#    FIXME,
#    XXX,
#    TODO

#ignore-paths=^src/tmp_project/__main__.py$,


disable=
    #__main__.py,
    attribute-defined-outside-init,
    invalid-name,
    missing-docstring,
    protected-access,
    too-few-public-methods,
    # handled by black
    format,
    # We anticipate #3512 where it will become optional
    fixme,
    cyclic-import,
